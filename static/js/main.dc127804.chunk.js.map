{"version":3,"sources":["components/NameForm.js","components/Breakfast.js","App.js","serviceWorker.js","index.js"],"names":["Name","props","react_default","a","createElement","className","id","type","placeholder","onChange","value","temporalName","onClick","Breakfast","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","orders","handleSubmit","bind","assertThisInitialized","nameItem","price","order","item","push","addOrders","_this2","BreakData","map","postDetail","index","key","name","variant","Component","App","NameForm","components_Breakfast","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kNA2BeA,eAzBF,SAAAC,GAEL,OACIC,EAAAC,EAAAC,cAAA,WAEIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,SACIE,GAAG,YACHC,KAAK,OACLC,YAAY,gBACZC,SAAUR,EAAMQ,SAChBC,MAAOT,EAAMU,gBAGrBT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,4BAA4BO,QAAUX,EAAMW,SAA9D,iECgCTC,cA7CX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACVC,OAAO,IAETR,EAAKS,aAAeT,EAAKS,aAAaC,KAAlBT,OAAAU,EAAA,EAAAV,CAAAD,IALZA,4EAQHY,EAAUC,GACpB,IAEMC,EAAQ,CACZC,KAAMH,EACNC,MAAOA,GAJMV,KAAKI,MAAMC,OAOnBQ,KAAKF,GACZX,KAAKhB,MAAM8B,UAAUd,KAAKI,MAAMC,yCAQxB,IAAAU,EAAAf,KACJ,OACAf,EAAAC,EAAAC,cAAA,WACM6B,EAAUC,IAAI,SAACC,EAAYC,GAAb,OACdlC,EAAAC,EAAAC,cAAA,OAAKiC,IAAKD,EAAO/B,UAAU,mBACzBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAa8B,EAAWG,MACtCpC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAa8B,EAAWR,OACtCzB,EAAAC,EAAAC,cAAA,UAAQmC,QAAQ,UAAU3B,QAAS,WACzBoB,EAAKT,aAAaY,EAAWG,KAAMH,EAAWR,QAC/CpB,KAAK,UAFd,sBAjCQiC,aCaTC,MAZf,WACE,OACEvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAElBH,EAAAC,EAAAC,cAACsC,EAAD,MACAxC,EAAAC,EAAAC,cAACuC,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dc127804.chunk.js","sourcesContent":["import React from 'react';\n\nconst Name = props => {\n\n        return (\n            <div>\n\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col s8 m8\">\n                            <input\n                                id=\"inputName\"\n                                type=\"text\"\n                                placeholder=\"Nombre Mesero\"\n                                onChange={props.onChange}\n                                value={props.temporalName}>\n                              </input>\n                        </div>\n                        <div className=\"col s4 m4\">\n                        <button className=\"waves-effect btn btn-save\" onClick= {props.onClick} >Enviar</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n}\n\nexport default Name;\n","import React, {Component} from 'react';\nimport BreakData from './breakfast.json'\n\n\n\nclass Breakfast extends Component {\n    constructor(){\n        super();\n        this.state = {\n           orders:[]\n        }\n         this.handleSubmit = this.handleSubmit.bind(this);\n}\n\n handleSubmit(nameItem, price){\n    const orders = this.state.orders;\n\n    const order = {\n      item: nameItem,\n      price: price\n    }\n\n    orders.push(order);\n    this.props.addOrders(this.state.orders);\n\n\n    }\n\n\n\n\n    render(){\n        return(\n        <div>\n             {BreakData.map((postDetail, index) =>\n              <div key={index} className=\"flip-card-front\">\n                <h1 className=\"activator\">{postDetail.name}</h1>\n                <h1 className=\"activator\">{postDetail.price}</h1>\n                <button variant=\"warning\" onClick={()=>{\n                          this.handleSubmit(postDetail.name, postDetail.price);\n                      }} type=\"submit\" >Agregar</button>\n              </div>\n\n\n              )}\n                </div>\n\n        )\n    }\n}\n\nexport default Breakfast\n","import React from 'react';\nimport './App.css';\nimport Name from './components/NameForm';\nimport Breakfast from './components/Breakfast';\n//import Comand from './components/Comand';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n      <Name/>\n      <Breakfast/>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}